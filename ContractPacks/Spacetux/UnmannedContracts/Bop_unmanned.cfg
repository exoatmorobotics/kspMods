// Credit to tjsnh for his Advanced Progression Contracts.  I got a lot
// of inspiration from his contracts and used a several of his contracts
// as templates for these
// The Advanced Progression Contracts mod is available at:
//   https://kerbalstuff.com/mod/642/Advanced%20Progression%20Contracts
// and is strongly recommended to be used with this mod

// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

///////////////////////////////////////
//
// Unmanned Bop Flyby
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = FirstUnmannedBopFlyby
	group = SpaceTuxGroup
	title = Perform an  unmanned Bop flyby mission.

	// description = Send a probe to perform a flyby of the Bop! This will be a strong demonstration of our capabilities, and an important 'first' for our space program! 
	topic = flyby
	subject = Bop
	motivation = future landing

	notes = Complete the following:
	synopsis = Send a probe to space within the SOI of Bop
	completedMessage = You did it! We've send a probe on a Bop flyby
	agent = Space Penguins, Inc
	cancellable = false
	declinable = false
	prestige = Significant
	targetBody = Bop
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 5.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 99.0

	REQUIREMENT
	{
		name = ReachSpace5821
		type = ReachSpace
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = Sequence5821
		type = Sequence
		title = Bop Flyby

		PARAMETER
		{
			name = VesselParameterGroup5821
			type = VesselParameterGroup
			define = Bop Flyby
			PARAMETER
			{
				name = HasCrew5821
				type = HasCrew
				maxCrew = 0
				minCrew = 0
			}
			PARAMETER
			{
                                name = ReachState5821
                                type = ReachState
                                // maxAltitude = 50000
                                targetBody = Bop
			}
		}
	}
}

///////////////////////////////////////
//
// Unmanned Bop Impact
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = FirstBopImpact
	group = SpaceTuxGroup
	title = Crash a probe on Bop!
	// description = We want to get larger, clearer closeup pictures.  To do this, we need to send a probe to crash on Bop.  This will be a monumental achievement.

	topic = crash
	subject = Bop
	motivation = moar pictures

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it crash onto the Bop
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = 2600
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Bop
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 10.0
	rewardFunds = Random(18000.0, 22000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	
	REQUIREMENT
	{
		name = ReachSpace5822
		type = ReachSpace
	}

	// If we've landed, then no need to crash a probe into it
	REQUIREMENT
	{
		name = Nolanding5822
		type = Landing
		targetBody = Bop
		invertRequirement = true
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5822
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew5822
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		PARAMETER
		{
			name = ReachState5822
			type = ReachState

			// Minimum and maximum altitudes.
			minAltitude = 0
			maxAltitude = 75000

			// Minimum and maximum speeds
			minSpeed = 500
			maxSpeed = 5000

			// Text to use for the parameter
			// Default Vessel State: <state details>
			//title =
		}
		PARAMETER
		{
			name = VesselDestroyed5821
			type = VesselDestroyed
			mustImpactTerrain = true
			completeInSequence = true
		}
	}
}


///////////////////////////////////////
//
// Unmanned Bop Targeted Impact
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = TargetedBopImpact
	group = SpaceTuxGroup
	title = Crash a probe on Bop on a target!
	// description = We want to get larger, clearer closeup pictures of a potential landing site.  To do this, we need to send a probe to crash on Bop and impact at the specified location.  This will be a monumental achievement.

	topic = crash
	subject = Bop
	motivation = moar pictures

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it crash onto the Bop at a specific location
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = 100
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Bop
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	
	REQUIREMENT
	{
		name = ReachSpace5823
		type = ReachSpace
	}
	// If we've landed, then no need to crash a probe into it
	REQUIREMENT
	{
		name = Nolanding5823
		type = Landing
		targetBody = Bop
		invertRequirement = true
	}
	
	REQUIREMENT
	{
	    name = CompleteContract5823
	    type = CompleteContract

	    // The type of contract being checked.  This can either be a
	    // ContractConfigurator contract type or a standard contract type (class).
	    contractType = FirstBopImpact

	    // The minimum number of times the given contract type must have been
	    // completed before the requirement is met.
	    // Default = 1
	    minCount = 1

	    // The maximum number of times the given contract type can be completed
	    // before the requirement will no longer be met.
	    // Default = Infinite
	    // maxCount = 5

	    // The amount of time after the last instance of the contract was
	    // complete before we can attempt again. Can specify
	    // values in years (y), days (d), hours (h), minutes (m), seconds (s)
	    // or any combination of those.
	    cooldownDuration = 10d
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5823
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew5823
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		PARAMETER
		{
			name = ReachState5823
			type = ReachState

			// Minimum and maximum altitudes.
			minAltitude = 0
			maxAltitude = 75000

			// Minimum and maximum speeds
			minSpeed = 500
			maxSpeed = 5000

			// Text to use for the parameter
			// Default Vessel State: <state details>
			//title =
		}

		PARAMETER
		{
			name = VisitWaypoint5823
			type = VisitWaypoint
			index = 0
			distance = 10000
			hideOnCompletion = true
		}

		PARAMETER
		{
			name = VesselDestroyed5823
			type = VesselDestroyed
			mustImpactTerrain = true
			completeInSequence = true
		}
	}

	BEHAVIOUR
	{
		name = WaypointGenerator5823
		type = WaypointGenerator
		
		// Use this to generate a waypoint with random coordinates
		RANDOM_WAYPOINT
		{
			// The name of the waypoint - displayed on the marker
			// name = Impact Target
	
			// Body for the waypoint - defaulted from the contract if not
			// supplied.
			// targetBody = Kerbin
	
			// The number of waypoints to generate.
			// Default = 1
			count = 1
	
			// The icon to use when displaying the waypoint.  If the path
			// is not specified, the Squad/Contracts/Icons directory is
			// assumed.  Otherwise, the path must be from GameData/
			icon = thermometer
	
			// The altitude of the waypoint.
			// Default: A random value between 0.0 and the atmosphere ceiling.
			// If there's no atmosphere, then always 0.0
			altitude = 0.0
	
			// Whether the waypoint generated can be on water
			// Default = true
			waterAllowed = true
	
			// Force the waypoint to fall along the equator.  For boring
			// contracts.
			// Default = false
			forceEquatorial = false
		}
	
	}
}

///////////////////////////////////////
//
// Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = FirstBopOrbitalSat
	group = SpaceTuxGroup
	title = Orbit the first artificial satellite around Bop.
	// description = We want you to place a satellite in orbit around Bop. This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = Bop
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around Bop.
	completedMessage = You did it! We've placed a satellite in orbit around Bop! This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Kerbin
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace5824
		type = ReachSpace
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5824
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew5824
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = Orbit5824
			type = Orbit
			targetBody = Bop
			minAltitude = 8000			
		}
	}
}

///////////////////////////////////////
//
// Polar Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = PolarBopOrbitalSat
	group = SpaceTuxGroup
	title = Orbit the first artificial satellite in a polar orbit around Bop.
	// description = We want you to place a satellite in orbit around Bop. This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = Bop
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around Bop.
	completedMessage = You did it! We've placed a satellite in orbit around Bop! This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Kerbin
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace5824
		type = ReachSpace
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5824
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew5824
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = PolarOrbit5824
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 3
		}
	}
	BEHAVIOUR
	{
		name = PolarOrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			targetBody = Bop
			type = POLAR
			// difficulty = 1
		}
	}
}

///////////////////////////////////////
//
// Equatorial Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = EquatorialBopOrbitalSat
	group = SpaceTuxGroup
	title = Orbit the first artificial satellite in an equatorial orbit around Bop.
	// description = We want you to place a satellite in orbit around Bop. This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = Bop
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around Bop.
	completedMessage = You did it! We've placed a satellite in orbit around Bop! This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Kerbin
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace5824
		type = ReachSpace
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5824
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew5824
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = EquatorialOrbit5824
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 3
		}
	}
	BEHAVIOUR
	{
		name = EquatorialOrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			targetBody = Bop
			type = EQUATORIAL 
			// difficulty = 1
		}
	}
}

///////////////////////////////////////
//
// Kolniya Orbit a satellite
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = KolniyaBopOrbitalSat
	group = SpaceTuxGroup
	title = Orbit the first artificial satellite in a Kolniya orbit around Bop.
	// description = We want you to place a satellite in orbit around Bop. This will be a significant 'first' for our space program! The satellite doesn't need to be anything fancy, just cobble something together and put it up there!

	topic = satellites
	subject = Bop
	motivation = test

	notes = Complete the following:
	synopsis = Put a satellite in orbit around Bop.
	completedMessage = You did it! We've placed a satellite in orbit around Bop! This will be a day long remembered.
	agent = Space Penguins, Inc
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Kerbin
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 15.0
	rewardFunds = Random(28000.0, 32000.0)
	advanceFunds = Random(9000.0, 11000.0)
	// weight = 10.0
	REQUIREMENT
	{
		name = ReachSpace5824
		type = ReachSpace
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG5824
		type = VesselParameterGroup
		define = Satellite
		PARAMETER
		{
			name = HasCrew5824
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}
		PARAMETER
		{
			name = KolniyaOrbit5824
			type = ReachSpecificOrbit
			index = 0
			deviationWindow = 3
		}
	}
	BEHAVIOUR
	{
		name = EquatorialOrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			targetBody = Bop
			type = KOLNIYA
			// difficulty = 1
		}
	}
}

// <LANDING_FOLLOWS>
///////////////////////////////////////
//
// Unmanned Bop Landing
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = FirstUnmannedBopLanding
	group = SpaceTuxGroup
	title = Land a probe on the Bop!
	// description = Time to do an unmanned landing on the Bop!

	topic = landing
	subject = BopSrf
	motivation = want to be sure the Bop will support a ship (isn't made out of dust) before we send a manned craft.  This will be a monumental achievement.

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it land on the Bop
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc
	// agent = Research & Development Department

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = 100
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Bop
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 25.0
	rewardReputation = 20.0
	rewardFunds = Random(38000.0, 42000.0)
	advanceFunds = Random(19000.0, 21000.0)
	// weight = 10.0
	
	REQUIREMENT
	{
		name = ReachSpace5825
		type = ReachSpace
	}
	// If we've landed, then no need to land again 
	REQUIREMENT
	{
		name = Nolanding5825
		type = Landing
		targetBody = Bop
		invertRequirement = true
	}
	
	REQUIREMENT
	{
	    name = CompleteContract5826
	    type = CompleteContract

	    // The type of contract being checked.  This can either be a
	    // ContractConfigurator contract type or a standard contract type (class).
	    contractType = FirstBopImpact

	    // The minimum number of times the given contract type must have been
	    // completed before the requirement is met.
	    // Default = 1
	    minCount = 1

	    // The maximum number of times the given contract type can be completed
	    // before the requirement will no longer be met.
	    // Default = Infinite
	    // maxCount = 5

	    // The amount of time after the last instance of the contract was
	    // complete before we can attempt again. Can specify
	    // values in years (y), days (d), hours (h), minutes (m), seconds (s)
	    // or any combination of those.
	    cooldownDuration = 10d
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	
	PARAMETER
	{
		name = VPG_5826
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew5826
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	
		

		PARAMETER
		{
			name = ReachState5826
			type = ReachState
			situation = LANDED
			completeInSequence = true
			disableOnStateChange = true
		}
	}
}

///////////////////////////////////////
//
// Unmanned Bop Targeted Landing
//
///////////////////////////////////////

CONTRACT_TYPE
{
	name = TargetedUnmannedBopLanding
	group = SpaceTuxGroup
	title = Land a probe on the Bop at a specified target!
	// description = Time to do a targeted, unmanned landing on the Bop!  This will be a monumental achievement.

	topic = landing
	subject = BopSrf
	motivation = want to be get close-up pictures of a projected landing site for a future manned landing on Bop. 

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it land on the Bop
	completedMessage = Future generations will remember this day.
	agent = Space Penguins, Inc

	minExpiry = 50.0
	maxExpiry = 100.0
	// Contract deadline in days.  Default is no deadline.
	deadline = 100
	cancellable = true
	declinable = true
	prestige = Significant
	targetBody = Bop
	maxCompletions = 5
	maxSimultaneous = 2
	rewardScience = 25.0
	rewardReputation = 25.0
	rewardFunds = Random(43000.0, 47000.0)
	advanceFunds = Random(19000.0, 21000.0)
	// weight = 10.0
	
	REQUIREMENT
	{
		name = ReachSpace<NUM_7>
		type = ReachSpace
	}
	
	REQUIREMENT
	{
	    name = CompleteContract<NUM_7>
	    type = CompleteContract

	    // The type of contract being checked.  This can either be a
	    // ContractConfigurator contract type or a standard contract type (class).
	    contractType = FirstBopImpact

	    // The minimum number of times the given contract type must have been
	    // completed before the requirement is met.
	    // Default = 1
	    minCount = 1

	    // The maximum number of times the given contract type can be completed
	    // before the requirement will no longer be met.
	    // Default = Infinite
	    // maxCount = 5

	    // The amount of time after the last instance of the contract was
	    // complete before we can attempt again. Can specify
	    // values in years (y), days (d), hours (h), minutes (m), seconds (s)
	    // or any combination of those.
	    cooldownDuration = 10d
	}
	
	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = AnyGigaDish
		type = Any

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish1
		}

		REQUIREMENT
		{
			name = PartUnlocked
			type = PartUnlocked

			part = RTGigaDish2
		}
	}

	REQUIREMENT:NEEDS[RemoteTech]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartUnlocked
		type = PartUnlocked

		part = commDish
	}

	REQUIREMENT:NEEDS[AntennaRange]
	{
		name = PartModuleTypeUnlocked
		type = PartModuleTypeUnlocked

		partModuleType = Antenna
		partModuleType = Power
	}


	PARAMETER
	{
		name = VPG_<NUM_7>
		type = VesselParameterGroup
		// nightingale - I'd let the title default itself in most cases
		//  title = Vessel: Any; Duration: 1 year

		PARAMETER
		{
			name = HasCrew<NUM_7>
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	

		PARAMETER
		{
			name = VisitWaypoint<NUM_8>
			type = VisitWaypoint
			index = 0
			distance = 5000
			hideOnCompletion = true
		}

		PARAMETER
		{
			name = ReachState<NUM_7>
			type = ReachState
			situation = LANDED
			completeInSequence = true
			disableOnStateChange = true
		}		
	}
	BEHAVIOUR
	{
		name = WaypointGenerator<NUM_8>
		type = WaypointGenerator
		
		// Use this to generate a waypoint with random coordinates
		RANDOM_WAYPOINT
		{
			// The name of the waypoint - displayed on the marker
			name = Impact Target
	
			// Body for the waypoint - defaulted from the contract if not
			// supplied.
			// targetBody = Kerbin
	
			// The number of waypoints to generate.
			// Default = 1
			count = 1
	
			// The icon to use when displaying the waypoint.  If the path
			// is not specified, the Squad/Contracts/Icons directory is
			// assumed.  Otherwise, the path must be from GameData/
			icon = thermometer
	
			// The altitude of the waypoint.
			// Default: A random value between 0.0 and the atmosphere ceiling.
			// If there's no atmosphere, then always 0.0
			altitude = 0.0
	
			// Whether the waypoint generated can be on water
			// Default = true
			waterAllowed = true
	
			// Force the waypoint to fall along the equator.  For boring
			// contracts.
			// Default = false
			forceEquatorial = false
		}
	
	}
}
