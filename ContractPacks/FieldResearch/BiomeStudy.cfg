// Contract for doing experiments in one biome.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_BiomeStudy
    group = FieldResearch

    title = Field Research: Biome study of @biome
    description = It's a commonly known fact that @biome is one of the most interesting places around!  We'd like to know more about it, let's do a study!
    synopsis = Perform the requested experiments at @biome.
    completedMessage = One of the most important things we've learned about @biome is that it's not as interesting as we first thought.

    // Up to two
    maxSimultaneous = 2

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = Prestige() == Trivial ? HomeWorld() : Prestige() == Significant ? @FieldResearch:l2Bodies.Random() : @FieldResearch:l3Bodies.Random()

    // Contract rewards
    rewardFunds = Random(12500.0, 15000.0)
    rewardReputation = Random(2.0, 5.0)

    DATA
    {
        type = Biome
        biome = @targetBody.Biomes().Where(b => b.RemainingScience() > 50.0).Random()
    }

    // Check the cb/biome for uniqueness across active contracts of this type.  (Convert to a
    // string because that automatically includes the celestial body as well).
    DATA
    {
        type = string
        activeUniqueValue = true

        biomeUniqueCheck = @biome
    }

    DATA
    {
        type = List<ScienceSubject>
        scienceSubjects = AllScienceSubjectsByBiome([@biome]).Where(s => s.CollectedScience() == 0.0).Random(8)

        laSubjects = @scienceSubjects.Where(s => s.Situation() == SrfLanded)
        spSubjects = @scienceSubjects.Where(s => s.Situation() == SrfSplashed)
        flSubjects = @scienceSubjects.Where(s => s.Situation() == FlyingLow)
        fhSubjects = @scienceSubjects.Where(s => s.Situation() == FlyingHigh)
        slSubjects = @scienceSubjects.Where(s => s.Situation() == InSpaceLow)
        shSubjects = @scienceSubjects.Where(s => s.Situation() == InSpaceHigh)
    }
    DATA
    {
        type = ScienceRecoveryMethod
        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    PARAMETER
    {
        name = CollectScienceLanded
        type = CollectScience

        subject = @/laSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    PARAMETER
    {
        name = CollectScienceSplashed
        type = CollectScience

        subject = @/spSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    PARAMETER
    {
        name = CollectScienceFlyingLow
        type = CollectScience

        subject = @/flSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    PARAMETER
    {
        name = CollectScienceFlyingHigh
        type = CollectScience

        subject = @/fhSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    PARAMETER
    {
        name = CollectScienceInSpaceLow
        type = CollectScience

        subject = @/slSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    PARAMETER
    {
        name = CollectScienceInSpaceHigh
        type = CollectScience

        subject = @/shSubjects
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    REQUIREMENT
    {
        type = Orbit
        targetBody = HomeWorld()
    }
}
